[CmdletBinding()]Param()

# GUI Launcher for MultiPoolMiner

#syncHash is the only variable that is accessible by all threads.
$Global:syncHash = [hashtable]::Synchronized(@{})

Set-Location (Split-Path $MyInvocation.MyCommand.Path)
$synchash.workingdirectory = (Get-Location)

$newRunspace = [runspacefactory]::CreateRunspace()
$newRunspace.ApartmentState = "STA"
$newRunspace.ThreadOptions = "ReuseThread"
$newRunspace.Open()
$newRunspace.SessionStateProxy.SetVariable("syncHash", $syncHash)

$guiCmd = [PowerShell]::Create().AddScript({
    Set-Location $synchash.workingdirectory
    # Can't figure out how to use 'using module' in a script like this - complains that it has to be the first statement in the script.
    # But that's ok - using Import-Module gets everything except the Miner class, which isn't needed here.
    Import-Module .\Include.psm1
    Add-Type -AssemblyName PresentationFramework, System.Drawing, System.Windows.Forms, WindowsFormsIntegration

    # Load settings
    If(Test-Path -Path '.\launchersettings.json') {
        $synchash.settings = Get-Content '.\launchersettings.json' | ConvertFrom-Json
    } else {
        $synchash.settings = [pscustomobject]@{'IdleDelay' = 120; 'StartWhenIdle' = $False}
    }
    
    #region Load window
    # Get XAML and create a window
    Add-Type -AssemblyName PresentationFramework
    [xml]$xaml = [xml](Get-Content -Path "Launcher.xaml")
    $reader = (New-Object -TypeName System.Xml.XmlNodeReader -ArgumentList $xaml)
    $syncHash.Window = [Windows.Markup.XamlReader]::Load($reader)
    $xaml.SelectNodes("//*[@*[contains(translate(name(.),'n','N'),'Name')]]") | ForEach-Object{
        #Find all of the form types and add them as members to the Window
        $syncHash.Add($_.Name,$syncHash.Window.FindName($_.Name) )
    }

    # Create the image from a base64 encoded string, and set it for the window and taskbar icons
    $image = New-Object -TypeName System.Windows.Media.Imaging.BitmapImage
    $image.BeginInit()
    $image.StreamSource = [IO.MemoryStream][Convert]::FromBase64String("")
    $image.EndInit()
    $image.Freeze()
    $synchash.Window.Icon = $image
    $synchash.window.TaskbarItemInfo
    #endregion Load window

    #region JobCleanup
    # Cleanup finished jobs - https://foxdeploy.com/2016/05/17/part-v-powershell-guis-responsive-apps-with-progress-bars/
    $Script:jobCleanup = [hashtable]::Synchronized(@{})
    $Script:Jobs = [system.collections.arraylist]::Synchronized((New-Object System.Collections.ArrayList))
    $jobCleanup.Flag = $True
    $newRunspace = [runspacefactory]::CreateRunspace()
    $newRunspace.ApartmentState = "STA"
    $newRunspace.ThreadOptions = "ReuseThread"
    $newRunspace.Open()
    $newRunspace.SessionStateProxy.SetVariable("jobCleanup", $jobCleanup)
    $newRunspace.SessionStateProxy.SetVariable("jobs", $jobs)
    $jobCleanup.PowerShell = [PowerShell]::Create().AddScript({
        Do {
            Foreach($runspace in $jobs) {
                If ($runspace.Runspace.isCompleted) {
                    [void]$runspace.powershell.EndInvoke($runspace.Runspace)
                    $runspace.powershell.dispose()
                    $runspace.Runspace = $null
                    $runspace.powershell = $null
                }
            }
            $temphash = $jobs.clone()
            $temphash | Where { $_.runspace -eq $Null} | ForEach { $jobs.remove($_) }
            Start-Sleep -Seconds 1
        } While (jobCleanup.flag)
    })
    $jobCleanup.PowerShell.Runspace = $newRunspace
    $jobCleanup.Thread = $jobCleanup.PowerShell.BeginInvoke()

    $syncHash.Window.Add_Closed({
        # Make sure miner gets closed if it was running
        $synchash.Running = $false
        $synchash.GUIRunning = $false
        if($syncHash.MultiPoolMinerProcess -and $syncHash.MultiPoolMinerProcess.HasExited -eq $false) {
            $synchash.MultiPoolMinerProcess.CloseMainWindow()
        }
        $jobCleanup.Flag = $False
        $jobCleanup.PowerShell.Dispose()


    })
    #endregion JobCleanup

    # Set control values
    $syncHash.IdleDelay.Text = $synchash.Settings.IdleDelay
    $syncHash.StartWhenIdle.IsChecked = $synchash.Settings.StartWhenIdle

    # Set mining status variables.
    $syncHash.Running = $false
    $syncHash.ManualStart = $false
    $syncHash.MultiPoolMinerProcess = $null

    # Setup functions for buttons
    
    $syncHash.Window.Add_Closing({
        [System.Windows.Forms.Application]::Exit()
    })

    $syncHash.StartStop.add_Click({
        if($syncHash.Running) {
            $syncHash.Running = $false
            $syncHash.ManualStart = $false
            $syncHash.StartStop.Dispatcher.Invoke([action]{$syncHash.StartStop.Content = "Start Mining"})
            $syncHash.StatusText.Dispatcher.Invoke([action]{$syncHash.StatusText.Text = "Stopped"})
            #Stop-Process $syncHash.MultiPoolMinerProcess
        } else {
            $syncHash.Running = $true
            $syncHash.ManualStart = $true
            $syncHash.StartStop.Dispatcher.Invoke([action]{$syncHash.StartStop.Content = "Stop Mining"})
            $syncHash.StatusText.Dispatcher.Invoke([action]{$syncHash.StatusText.Text = "Running"})
            #$syncHash.MultiPoolMinerProcess = Start-Process (@{desktop = "powershell"; core = "pwsh"}.$Global:PSEdition) -ArgumentList "-executionpolicy bypass `"$(Convert-Path ".\MultiPoolMiner.ps1")`"" -PassThru
            
        }
        
    })

    $syncHash.Setup.add_Click({
        Start-Process (@{desktop = "powershell"; core = "pwsh"}.$Global:PSEdition) -ArgumentList "-executionpolicy bypass `"$(Convert-Path ".\Setup.ps1")`""
    })

    $syncHash.ShowMiners.add_Click({
        $Miners = Import-CliXml .\Data\Miners.xml
        $Miners | Sort-Object -Descending Type, Profit_Bias | Select-Object @{Label="Miner";Expression={$_.Name}},
            @{Label="Type"; Expression={$_.Type}},
            @{Label= "Algorithm"; Expression = {$_.HashRates.PSObject.Properties.Name}}, 
            @{Label= "Speed"; Expression = {$_.HashRates.PSObject.Properties.Value | ForEach-Object {if ($_ -ne $null) {"$($_ | ConvertTo-Hash)/s"}else {"Benchmarking"}}}}, 
            @{Label= "BTC/Day"; Expression = {$_.Profits.PSObject.Properties.Value | ForEach-Object {if ($_ -ne $null) {$_.ToString("N5")}else {"Benchmarking"}}}}, 
            @{Label= "Profits_Bias"; Expression = {$_.Profits_Bias.PSObject.Properties.Value | ForEach-Object {if ($_ -ne $null) {$_.ToString("N5")}else {"Benchmarking"}}}}, 
            @{Label= "Accuracy"; Expression = {$_.Pools.PSObject.Properties.Value.MarginOfError | ForEach-Object {(1 - $_).ToString("P0")}}}, 
            @{Label= "BTC/GH/Day"; Expression = {$_.Pools.PSObject.Properties.Value.Price | ForEach-Object {($_ * 1000000000).ToString("N5")}}}, 
            @{Label= "Pool"; Expression = {$_.Pools.PSObject.Properties.Value | ForEach-Object {if ($_.Info) {"$($_.Name)-$($_.Info)"}else {"$($_.Name)"}}}} | Out-GridView
    })

    $syncHash.ResetBenchmark.add_Click({
        $confirm = [System.Windows.MessageBox]::Show("Resetting benchmarks will delete all miner performance data and restart benchmarking. Are you sure you want to continue?", "Reset Benchmarks", "YesNo", "Warning", "No")
        if($confirm) {
            Remove-Item "Stats\*_HashRate.txt"
        }
    })
    $syncHash.ResetProfit.add_Click({
        $confirm = [System.Windows.MessageBox]::Show("Resetting profit will delete all pool profit data and restart benchmarking. Are you sure you want to continue?", "Reset Profit", "YesNo", "Warning", "No")
        if($confirm) {
            Remove-Item "Stats\*Profit.txt"
        }
    })

    $syncHash.IdleDelay.add_TextChanged({
        $synchash.Settings.IdleDelay = $syncHash.IdleDelay.Text
        $synchash.Settings | ConvertTo-Json | Out-File '.\Launchersettings.json'
    })

    $syncHash.StartWhenIdle.add_Checked({
        $synchash.Settings.StartWhenIdle = $syncHash.StartWhenIdle.IsChecked
        $synchash.Settings | ConvertTo-Json | Out-File '.\Launchersettings.json'
    })

    $syncHash.StartWhenIdle.add_Unchecked({
        $synchash.Settings.StartWhenIdle = $syncHash.StartWhenIdle.IsChecked
        $synchash.Settings | ConvertTo-Json | Out-File '.\Launchersettings.json'
    })

    $syncHash.website.add_Click({
        Start-Process "https://multipoolminer.io/"
    })

    #region Create multipoolminer script runner thread...
    # This thread is responsible for starting the script when $synchash.Running = $true, and stopping it when it's $false.
    # The Running flag is set by both the StartStop button and the idle monitoring thread.
    # It also monitors the script and restarts it if closed unexpectedly, and stopping any rogue miners that keep going after the script is closed.
    $newRunspace = [runspacefactory]::CreateRunspace()
    $newRunspace.ApartmentState = "STA"
    $newRunspace.ThreadOptions = "ReuseThread"
    $newRunspace.Open()
    $newRunspace.SessionStateProxy.SetVariable("SyncHash", $SyncHash)
    $scriptRunner = [PowerShell]::Create().AddScript({
        Set-Location $synchash.workingdirectory
        While ($syncHash.GUIRunning) {
            If($synchash.Running) {
                # Start script if it is not running
                If($syncHash.MultiPoolMinerProcess -and $syncHash.MultiPoolMinerProcess.HasExited -eq $false) {
                    # Script is already running, do nothing
                } else {
                    # Start the script
                    $FilePath = (@{desktop = "powershell"; core = "pwsh"}.$Global:PSEdition)
                    $ArgumentList = "-executionpolicy bypass `"$(Convert-Path ".\MultiPoolMiner.ps1")`""
                    $WorkingDirectory = $synchash.workingdirectory
    
                    $Job = Start-Job -ArgumentList $PID, $FilePath, $ArgumentList, $WorkingDirectory {
                        param($ControllerProcessID, $FilePath, $ArgumentList, $WorkingDirectory)
                        $ControllerProcess = Get-Process -Id $ControllerProcessID
                        if ($ControllerProcess -eq $null) {return}
    
                        $ProcessParam = @{}
                        $ProcessParam.Add("FilePath", $FilePath)
                        $ProcessParam.Add("WindowStyle", 'Minimized')
                        if ($ArgumentList -ne "") {$ProcessParam.Add("ArgumentList", $ArgumentList)}
                        if ($WorkingDirectory -ne "") {$ProcessParam.Add("WorkingDirectory", $WorkingDirectory)}
                        $Process = Start-Process @ProcessParam -PassThru
                        if ($Process -eq $null) {
                            [PSCustomObject]@{ProcessId = $null}
                            return        
                        }
    
                        [PSCustomObject]@{ProcessId = $Process.Id; ProcessHandle = $Process.Handle}
    
                        $ControllerProcess.Handle | Out-Null
                        $Process.Handle | Out-Null
    
                        do {if ($ControllerProcess.WaitForExit(1000)) {$Process.CloseMainWindow() | Out-Null}}
                        while ($Process.HasExited -eq $false)
                    }
                    $synchash.scriptrunnerjob = $Job
                    do {Start-Sleep 1; $JobOutput = Receive-Job $Job}
                    while ($JobOutput -eq $null)
    
                    $syncHash.MultiPoolMinerProcess = Get-Process -Id $JobOutput.ProcessId
                    $syncHash.MultiPoolMinerHandle = $JobOutput.Handle
                    $synchash.JobOutput = $JobOutput
                }
            } else {
                # Close script if it is running
                if($synchash.MultiPoolMinerProcess -and $synchash.MultiPoolMinerProcess.HasExited -eq $false) {
                    $synchash.MultiPoolMinerProcess.CloseMainWindow()
                }
            }
            $synchash.scriptRunnerError = $Error
            Start-Sleep 2
        }
    })
    $scriptrunner.Runspace = $newRunspace
    [void]$Jobs.Add(([pscustomobject]@{ScriptRunner = $scriptRunner; Runspace = $scriptrunner.BeginInvoke() }))
    #endregion Create multipoolminer script runner thread...

    #region Create idle monitoring
    $newRunspace = [runspacefactory]::CreateRunspace()
    $newRunspace.ApartmentState = "STA"
    $newRunspace.ThreadOptions = "ReuseThread"
    $newRunspace.Open()
    $newRunspace.SessionStateProxy.SetVariable("SyncHash", $SyncHash)
    $idlemonitor = [PowerShell]::Create().AddScript({
        # There is no powershell native way to check how long the system has been idle.  Have to use .NET code to do it.
        Add-Type @'
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
namespace PInvoke.Win32 {
    public static class UserInput {
        [DllImport("user32.dll", SetLastError=false)]
        private static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);

        [StructLayout(LayoutKind.Sequential)]
        private struct LASTINPUTINFO {
            public uint cbSize;
            public int dwTime;
        }

        public static DateTime LastInput {
            get {
                DateTime bootTime = DateTime.UtcNow.AddMilliseconds(-Environment.TickCount);
                DateTime lastInput = bootTime.AddMilliseconds(LastInputTicks);
                return lastInput;
            }
        }
        public static TimeSpan IdleTime {
            get { 
                return DateTime.UtcNow.Subtract(LastInput); 
            }
        }
        public static int LastInputTicks {
            get {
                LASTINPUTINFO lii = new LASTINPUTINFO();
                lii.cbSize = (uint)Marshal.SizeOf(typeof(LASTINPUTINFO));
                GetLastInputInfo(ref lii);
                return lii.dwTime;
            }
        }
    }
}
'@
        While ($syncHash.GUIRunning) {
            $synchash.idleseconds = [math]::Round(([PInvoke.Win32.UserInput]::IdleTime).TotalSeconds)
            $SyncHash.IdleTime.Dispatcher.Invoke([action]{$SyncHash.IdleTime.Text = "$($syncHash.idleseconds)s"})

            # Start mining if idle long enough
            if($synchash.Settings.StartWhenIdle -and !$synchash.Running -and $synchash.idleseconds -gt $synchash.Settings.IdleDelay) {
                $synchash.ManualStart = $false
                $synchash.Running = $true
            }

            # Stop mining if no longer idle, and mining was not manually started
            if($synchash.Running -and !$synchash.ManualStart -and $synchash.idleseconds -lt $synchash.Settings.IdleDelay) {
                $synchash.Running = $false
            }

            Start-Sleep 1
        }
    })
    $idlemonitor.Runspace = $newRunspace
    [void]$Jobs.Add(([pscustomobject]@{IdleMonitor = $idlemonitor; Runspace = $idlemonitor.BeginInvoke() }))
    #endregion Create idle monitoring
    
    #region Create balance checking thread
    $newRunspace = [runspacefactory]::CreateRunspace()
    $newRunspace.ApartmentState = "STA"
    $newRunspace.ThreadOptions = "ReuseThread"
    $newRunspace.Open()
    $newRunspace.SessionStateProxy.SetVariable("SyncHash", $SyncHash)
    $balanceupdater = [PowerShell]::Create().AddScript({
        Set-Location $synchash.workingdirectory
        # Can't figure out how to use 'using module' in a script like this - complains that it has to be the first statement in the script.
        # But that's ok - using Import-Module gets everything except the Miner class, which isn't needed here.
        Import-Module .\Include.psm1
        $Rates = [PSCustomObject]@{BTC = [Double]1}
        $Balances = [PSCustomObject]

        While ($synchash.GUIRunning) {
            . .\Config.ps1

            # Don't include BTC as one of the currencies to show
            [array]$Currency = $Currency | Where-Object {$_ -ne "BTC"}

            # Set columns for currencies
            $synchash.PoolBalancesListTotal1Header = if($currency[0]) {"Total $($Currency[0])"} else {""}
            $synchash.PoolBalancesListTotal2Header = if($currency[1]) {"Total $($Currency[1])"} else {""}
            $synchash.PoolBalancesListTotal3Header = if($currency[2]) {"Total $($Currency[2])"} else {""}
            $synchash.PoolBalancesListTotal1.Dispatcher.Invoke([action]{$syncHash.PoolBalancesListTotal1.Header = $synchash.PoolBalancesListTotal1Header})
            $synchash.PoolBalancesListTotal2.Dispatcher.Invoke([action]{$syncHash.PoolBalancesListTotal2.Header = $synchash.PoolBalancesListTotal2Header})
            $synchash.PoolBalancesListTotal3.Dispatcher.Invoke([action]{$syncHash.PoolBalancesListTotal3.Header = $synchash.PoolBalancesListTotal3Header})

            # Update exchange rates
            $NewRates = Invoke-RestMethod "https://api.coinbase.com/v2/exchange-rates?currency=BTC" -UseBasicParsing -TimeoutSec 10 -ErrorAction Stop | Select-Object -ExpandProperty data | Select-Object -ExpandProperty rates
            $Currency | Where-Object {$NewRates.$_} | ForEach-Object {$Rates | Add-Member $_ ([Double]$NewRates.$_) -Force}

            # Set exchange rates on status bar
            $synchash.exchangerate = ""
            $rates | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name | ForEach-Object {$synchash.exchangerate += "  $_`: {0:N2}  " -f $rates.$_}
            $synchash.ExchangeRates.Dispatcher.Invoke([action]{$synchash.ExchangeRates.Text = $synchash.exchangerate})

            # Get pool balances and format the way the listview expects
            Get-Balances -Wallet $Wallet -API_Key $API_Key -Rates $Rates | ForEach-Object {$Balances | Add-Member $_.Name $_.Content -Force}
            $BalanceNames = $Balances | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name
            $synchash.balances = $BalanceNames | Select-Object -Property @{Name='Name';Expression={$_}}, @{Name='Updated';Expression={$Balances.$_.lastupdated}},
                @{Name='Confirmed';Expression={"{0:N8}" -f $Balances.$_.balance}},
                @{Name='Pending';Expression={"{0:N8}" -f $Balances.$_.pending}},
                @{Name='Total';Expression={"{0:N8}" -f $Balances.$_.total}},
                @{Name='Total1';Expression={"{0:N2}" -f $Balances.$_."total_$($Currency[0])"}},
                @{Name='Total2';Expression={"{0:N2}" -f $Balances.$_."total_$($Currency[1])"}},
                @{Name='Total3';Expression={"{0:N2}" -f $Balances.$_."total_$($Currency[2])"}}
            
            # Tell list to update
            $synchash.PoolsBalancesList.Dispatcher.Invoke([action]{$syncHash.PoolsBalancesList.ItemsSource = $synchash.balances})
            $syncHash.balanceerror = $error

            # Sleep for a long time here. Balances don't change often, and we don't want to hammer the pool APIs too hard.
            Start-Sleep 120
        }
    })

    $balanceupdater.Runspace = $newRunspace
    [void]$Jobs.Add(([pscustomobject]@{BalanceUpdater = $balanceupdater; Runspace = $balanceupdater.BeginInvoke() }))
    #endregion Create balance checking thread
    
    #region Create mining list updating thread
    $newRunspace = [runspacefactory]::CreateRunspace()
    $newRunspace.ApartmentState = "STA"
    $newRunspace.ThreadOptions = "ReuseThread"
    $newRunspace.Open()
    $newRunspace.SessionStateProxy.SetVariable("SyncHash", $SyncHash)
    $miningupdater = [PowerShell]::Create().AddScript({
        Set-Location $synchash.workingdirectory
        # Can't figure out how to use 'using module' in a script like this - complains that it has to be the first statement in the script.
        # But that's ok - using Import-Module gets everything except the Miner class, which isn't needed here.
        Import-Module .\Include.psm1

        $synchash.activeminerslastupdated = Get-Date

        While ($syncHash.GUIRunning) {
            if($syncHash.Running -and (Test-Path ".\Data\ActiveMiners.xml")) {
                if((Get-ChildItem ".\Data\ActiveMiners.xml").LastWriteTime -gt $synchash.activeminerslastupdated) {
                    $miners = Import-CliXml .\Data\Miners.xml
                    $synchash.activeminers = Import-CliXml .\Data\ActiveMiners.xml | Where-Object {$_.Activated -GT 0 -and $_.Status -eq "Running"} | ForEach-Object {
			$ActiveMiner = $_
                        # Find the matching entry in $Miners, to get pool information. Perhaps there is a better way to do this?
                        $MatchingMiner = $Miners | Where-Object {$_.Name -eq $ActiveMiner.Name -and $_.Path -eq $ActiveMiner.Path -and $_.Arguments -eq $ActiveMiner.Arguments -and $_.API -eq $ActiveMiner.API -and $_.Port -eq $ActiveMiner.Port}
                        [pscustomobject]@{
                            Name = $_.Name
                            Active = "{0:dd} Days {0:hh} Hours {0:mm} Minutes" -f ((Get-Date) - $_.Process.StartTime)
                            Type = (@($_.Type) -join ',')
                            Pool = (@($MatchingMiner.Pools.PsObject.Properties.Value.Name) -join ',')
                            Algorithm = (@($_.Algorithm) -join ',')
                            CurrentSpeed = (@($_.Speed_Live | Foreach-Object {"$($_ | ConvertTo-Hash)/s"}) -join ',')
                            BenchmarkedSpeed = (@($_.Speed | Foreach-Object {"$($_ | ConvertTo-Hash)/s"}) -join ',')
                            BTCday = "{0:N8}" -f $_.Profit
                            PID = $_.Process.Id
                            Path = Resolve-Path -Relative $_.Path
                        }
                    }
                    $synchash.activeminerslastupdated = Get-Date


                }
            } else {
                $synchash.activeminers = @{}
            }
            # Update profit per day in status bar
            $synchash.TotalBTCday = ($synchash.activeminers | Measure-Object -Sum BTCday).Sum
            $synchash.ProfitPerDay.Dispatcher.Invoke([action]{$synchash.ProfitPerDay.text = $synchash.TotalBTCday})
            $synchash.ActiveMinersList.Dispatcher.Invoke([action]{$syncHash.ActiveMinersList.ItemsSource = $synchash.activeminers})
            Start-Sleep 10
        }
    })
    $miningupdater.Runspace = $newRunspace
    [void]$Jobs.Add(([pscustomobject]@{MiningUpdater = $miningupdater; Runspace = $miningupdater.BeginInvoke() }))
    #endregion Create mining list updating thread

    #region Open window
    # See https://blog.netnerds.net/2016/01/showdialog-sucks-use-applicationcontexts-instead/ for an explaination of why not just use .ShowDialog()
    [System.Windows.Forms.Integration.ElementHost]::EnableModelessKeyboardInterop($synchash.Window)
    $syncHash.Window.Show()
    $syncHash.Window.Activate()
    $appContext = New-Object System.Windows.Forms.ApplicationContext
    [void][System.Windows.Forms.Application]::Run($appContext)
    #endregion Open window
})

# GUIRunning flag makes sure all threads exit after GUI closes
$syncHash.GUIRunning = $true

$guiCmd.Runspace = $newRunspace
$ui = $guiCmd.BeginInvoke()

Write-Host "MultiPoolMiner GUI.  If you close this, the GUI will exit as well."

# If running from the ISE or -debug is set, give a prompt that can access $synchash for debugging.
# Otherwise, hide the console window and wait for the GUI to exit.
If($DebugPreference -ne 'SilentlyContinue' -or $host.name -match 'ISE') {
    $host.EnterNestedPrompt()
} else {
    $windowcode = '[DllImport("user32.dll")] public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);' 
    $asyncwindow = Add-Type -MemberDefinition $windowcode -name Win32ShowWindowAsync -namespace Win32Functions -PassThru 
    $null = $asyncwindow::ShowWindowAsync((Get-Process -PID $pid).MainWindowHandle, 0) 
    While(!$ui.IsCompleted) {
        Start-Sleep 1
    }
}

$synchash.GUIRunning = $false
